import depositos.*
import formaciones.*
import vagones.*
import locomotoras.*

describe "test de trenes" {

	var deposito1 = new Deposito()
	var formacion1 = new Formacion()
	var formacion2 = new Formacion()
	var locomotora1 = new Locomotora()
	var locomotora2 = new Locomotora()
	var vagon1 = new Vagon(tipoDeVagon=carga)
	var vagon2 = new Vagon(tipoDeVagon=pasajero)
	var vagon3 = new Vagon(tipoDeVagon=pasajero)
	
	test"La cantidad de vagones livianos es 2" {
		formacion1.agregarVagon(vagon1)
		formacion1.agregarVagon(vagon2)
		vagon1.tipoDeVagon(carga)
		vagon2.tipoDeVagon(carga)
		carga.cargaMaxima(1000)
		pasajero.ancho(2)
		pasajero.largo(3)
		assert.equals(2, formacion1.cantidadVagonesLivianos())
	}

	test "Velocidad maxima de una formacion" {
		formacion1.agregarLocomotora(new Locomotora(velocidadMaxima = 10))
		assert.equals(10, formacion1.velocidadMaxima())
	}

	test "Es eficiente" {
		formacion1.agregarLocomotora(locomotora1)
		locomotora1.peso(100)
		locomotora1.capacidadMaximaDeArrastre(1000)
		assert.that(formacion1.esEficiente())
	}

	test "Puede moverse" {
		formacion2.agregarLocomotora(locomotora1)
		formacion2.agregarLocomotora(locomotora2)
		carga.cargaMaxima(100)
		locomotora1.capacidadMaximaDeArrastre(1000)
		carga.cargaMaxima(200)
		locomotora2.capacidadMaximaDeArrastre(1000)
		assert.that(formacion2.puedeMoverse())
	}

	test "Le faltan 880 kg de arrastre" {
		formacion2.agregarLocomotora(locomotora1)
		formacion2.agregarLocomotora(locomotora2)
		formacion2.agregarVagon(vagon1)
		formacion2.agregarVagon(vagon2)
		carga.cargaMaxima(200)
		pasajero.ancho(2)
		pasajero.largo(3)
		locomotora1.capacidadMaximaDeArrastre(800)
		locomotora2.capacidadMaximaDeArrastre(800)
		assert.equals(880, formacion2.cuantosKilosDeArrastreLeFalta())
	}

	test "El vagon mas pesado de la formacion es" {
		carga.cargaMaxima(180)
		pasajero.ancho(2)
		pasajero.largo(5)
		deposito1.agregarFormacion(formacion1)
		deposito1.agregarFormacion(formacion2)
		formacion1.agregarVagon(vagon1)
		formacion1.agregarVagon(vagon2)
		formacion2.agregarVagon(vagon3)	
		formacion2.agregarVagon(vagon2)	
		assert.equals( [vagon2,vagon3], deposito1.conjuntoDeVagonesMasPesados())
	}

	test"La formacion necesita un conductor experimentado" {
		deposito1.agregarFormacion(formacion1)
		formacion1.agregarVagon(vagon1)
		formacion1.agregarVagon(vagon2)
		formacion1.agregarLocomotora(locomotora1)
		formacion1.agregarLocomotora(locomotora2)
		pasajero.ancho(3)
		pasajero.largo(9)
		carga.cargaMaxima(3200)
		assert.that(deposito1.necesitoConductorExperimentado())
	}

}
 /* En el punto 7 se pide saber si el objeto deposito necesita un conductor experimentado
  * para ello  el deposito delega a el objeto formacion que a su vez delega a los objetos 
  * locomotora y vagon la comparacion para saber si esta es compleja  
*/
